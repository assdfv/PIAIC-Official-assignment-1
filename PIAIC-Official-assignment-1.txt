{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Calculate Area of a Circle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Write a Python program which accepts the radius of a circle from the user and compute the area.\n",
    "###### Program Console Sample Output 1:\n",
    "###### Input Radius: 0.5\n",
    "###### Area of Circle with radius 0.5 is 0.7853981634"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the value :0.5\n",
      "the area of circle is 0.785\n"
     ]
    }
   ],
   "source": [
    "radius=float(input(\"enter the value :\"))\n",
    "a=radius* 3.14\n",
    "b=a*radius\n",
    "print(\"the area of circle is\" , b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Check Number either positive, negative or zero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Write a Python program to check if a number is positive, negative or zero\n",
    "###### Program Console Sample Output 1:\n",
    "###### Enter Number: -1\n",
    "##### Negative Number Entered\n",
    "###### Program Console Sample Output 2:\n",
    "##### Integer: 3\n",
    "##### Positive Number Entered\n",
    "###### Program Console Sample Output 3:\n",
    "##### Integer: 0\n",
    "###### Zero Entered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any number : 2\n",
      "number is positive 2.0\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any number : \"))\n",
    "if a>0:\n",
    " print(\"number is positive\", a)\n",
    "elif a<0:\n",
    "     print(\"number is negative\", a)\n",
    "else: \n",
    "            print(\"number is zero\", a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any number : -2\n",
      "number is negative -2.0\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any number : \"))\n",
    "if a>0:\n",
    " print(\"number is positive\", a)\n",
    "elif a<0:\n",
    "     print(\"number is negative\", a)\n",
    "else: \n",
    "            print(\"number is zero\", a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any number : 0\n",
      "number is zero 0.0\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any number : \"))\n",
    "if a>0:\n",
    " print(\"number is positive\", a)\n",
    "elif a<0:\n",
    "     print(\"number is negative\", a)\n",
    "else: \n",
    "            print(\"number is zero\", a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Divisibility Check of two numbers"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# Write a Python program to check whether a number is completely divisible by another number. Accept two integer values form the user\n",
    "##### Program Console Sample Output 1:\n",
    "###### Enter numerator: 4\n",
    "###### Enter Denominator: 2\n",
    "##### Number 4 is Completely divisible by 2\n",
    "###### Program Console Sample Output 2:\n",
    "##### Enter numerator: 7\n",
    "\n",
    "##### Enter Denominator: 4\n",
    "###### Number 7 is not Completely divisible by 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any value numerator : 4\n",
      "enter any value  Denominator : 2\n",
      "Number 4 is Completely divisible by  2.0\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any value numerator : \"))\n",
    "b=float(input(\"enter any value  Denominator : \"))\n",
    "if a%b==0:\n",
    " print(\"Number 4 is Completely divisible by \" , b)\n",
    "else:\n",
    " print(\"Number 7 is not Completely divisible by \" ,b)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any value numerator : 7\n",
      "enter any value  Denominator : 4\n",
      "Number 7 is not Completely divisible by  4.0\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any value numerator : \"))\n",
    "b=float(input(\"enter any value  Denominator : \"))\n",
    "if a%b==0:\n",
    " print(\"Number 4 is Completely divisible by \" , b)\n",
    "else:\n",
    " print(\"Number 7 is not Completely divisible by \" ,b)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Calculate Volume of a sphere"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Write a Python program to get the volume of a sphere, please take the radius as input from user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Program Console Output:\n",
    "##### Enter Radius of Sphere: 1\n",
    "###### Volume of the Sphere with Radius 1 is 4.18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter radius of sphere :1\n",
      "Volume of the Sphere with Radius 1 is:  4.1866666666666665\n"
     ]
    }
   ],
   "source": [
    "radius=float(input(\"enter radius of sphere :\"))\n",
    "b=(4/3 * (3.14 * radius**3))\n",
    "print(\"Volume of the Sphere with Radius 1 is: \" ,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Copy string n times\n",
    "#### Write a Python program to get a string which is n (non-negative integer) copies of a given string.\n",
    "##### Program Console Output:\n",
    "##### Enter String: Hi\n",
    "###### How many copies of String you need: 4\n",
    "###### 4 Copies of Hi are HiHiHiHi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any string: hi\n",
      "How many copies of String you need :4\n",
      "Copies of Hi are : hihihihi\n"
     ]
    }
   ],
   "source": [
    "a=str(input(\"enter any string: \"))\n",
    "b=int(input(\"How many copies of String you need :\"))\n",
    "print(\"Copies of Hi are :\" ,a*b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Check if number is Even or Odd\n",
    "### Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user\n",
    "#### Program Console Output 1:\n",
    "##### Enter Number: 4\n",
    "###### 4 is Even\n",
    "#### Program Console Output 2:\n",
    "##### Enter Number: 9\n",
    "###### 9 is Odd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any number :4\n",
      "the given number is even\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any number :\"))\n",
    "if a%2==0:\n",
    " print(\"the given number is even\" )\n",
    "else:\n",
    "     print(\"the given number is odd\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any number :3\n",
      "the given number is odd\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter any number :\"))\n",
    "if a%2==0:\n",
    " print(\"the given number is even\" )\n",
    "else:\n",
    "     print(\"the given number is odd\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Vowel Tester\n",
    "### Write a Python program to test whether a passed letter is a vowel or not\n",
    "#### Program Console Output 1:\n",
    "##### Enter a character: A\n",
    "###### Letter A is Vowel\n",
    "#### Program Console Output 2:\n",
    "##### Enter a character: e\n",
    "###### Letter e is Vowel\n",
    "#### Program Console Output 2:\n",
    "##### Enter a character: N\n",
    "###### Letter N is not Vowel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any character :A\n",
      "enter a is vowel A\n"
     ]
    }
   ],
   "source": [
    "a=str(input(\"enter any character :\"))\n",
    "if(a=='A' or a=='e' or a=='f'or a=='b'):\n",
    "    print(\"enter a\", \"is vowel\" ,a)\n",
    "else:\n",
    "    print(\"enter N\", \"is not vowel :\"  ,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any character :e\n",
      "enter a is vowel e\n"
     ]
    }
   ],
   "source": [
    "a=str(input(\"enter any character :\"))\n",
    "if(a=='A' or a=='e' or a=='f'or a=='b'):\n",
    "    print(\"enter a\", \"is vowel\" ,a)\n",
    "else:\n",
    "    print(\"enter N\", \"is not vowel :\"  ,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter any character :N\n",
      "enter N is not vowel : N\n"
     ]
    }
   ],
   "source": [
    "a=str(input(\"enter any character :\"))\n",
    "if(a=='A' or a=='e' or a=='f'or a=='b'):\n",
    "    print(\"enter a\", \"is vowel\" ,a)\n",
    "else:\n",
    "    print(\"enter N\", \"is not vowel :\"  ,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Triangle area\n",
    "### Write a Python program that will accept the base and height of a triangle and compute the area\n",
    "###### Reference:\n",
    "https://www.mathgoodies.com/lessons/vol1/area_triangle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the value base : 4\n",
      "enter the value height : 8\n",
      "the area of triangle is : 1.0\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value base : \"))\n",
    "b=int(input(\"enter the value height : \" ))\n",
    "c=a/b*2\n",
    "print(\"the area of triangle is :\" , c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9. Calculate Interest\n",
    "Write a Python program to compute the future value of a specified principal amount, rate of interest, and a number of years\n",
    "Program Console Sample 1:\n",
    "Please enter principal amount: 10000\n",
    "Please Enter Rate of interest in %: 0.1\n",
    "Enter number of years for investment: 5\n",
    "After 5 years your principal amount 10000 over an interest rate of 0.1 % will be 16105.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please Enter Principal Amount: 10000\n",
      "Please Enter Rate Of Interest In %: 0.1\n",
      "Enter Number Of Years For Investment: 5\n",
      "After  5  Year An Interest Rate Of  0.1  Will Be  16105.100000000008\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"Please Enter Principal Amount: \"))\n",
    "b=float(input(\"Please Enter Rate Of Interest In %: \"))\n",
    "c=int(input(\"Enter Number Of Years For Investment: \"))\n",
    "for i in range(c):\n",
    "    a = a * (1+b)\n",
    "print(\"After \",c,\" Year An Interest Rate Of \",b,\" Will Be \",a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10 # write a Python program to compute the distance between the points (x1, y1) and (x2, y2).\n",
    "Program Console Sample 1:\n",
    "Enter Co-ordinate for x1: 2\n",
    "Enter Co-ordinate for x2: 4\n",
    "Enter Co-ordinate for y1: 4\n",
    "Enter Co-ordinate for y2: 4\n",
    "Distance between points (2, 4) and (4, 4) is 2\n",
    "Reference:https://en.wikipedia.org/wiki/Euclidean_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Co-ordinate for x1 :2\n",
      "Enter Co-ordinate for x2 :4\n",
      "Enter Co-ordinate for y1 :4\n",
      "Enter Co-ordinate for y2 :4\n",
      "distance b\\w point  (2, 4) and  (4, 4) is  2.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "a=int(input(\"Enter Co-ordinate for x1 :\"))\n",
    "b=int(input(\"Enter Co-ordinate for x2 :\"))\n",
    "c=int(input(\"Enter Co-ordinate for y1 :\"))\n",
    "d=int(input(\"Enter Co-ordinate for y2 :\"))\n",
    "e = math.sqrt( ((a-c)**2)+((b-d)**2) )\n",
    "print(\"distance b\\w point \", (a,b) , \"and \" , (c,d) , \"is \" , e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Feet to Centimeter Converter\n",
    "### Write a Python program to convert height in feet to centimetres.\n",
    "##### Program Console Sample 1:\n",
    "###### Enter Height in Feet: 5\n",
    "###### There are 152.4 Cm in 5 ft\n",
    "###### Reference:\n",
    "https://www.rapidtables.com/convert/length/feet-to-cm.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Height in Feet :5\n",
      "there are  152.4 Cm 5 ft\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"Enter Height in Feet :\"))\n",
    "b=a*30.48\n",
    "print(\"there are \" ,b , \"Cm\" , a , \"ft\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 12. BMI Calculator\n",
    "### Write a Python program to calculate body mass index\n",
    "##### Program Console Sample 1:\n",
    "###### Enter Height in Cm: 180\n",
    "###### Enter Weight in Kg: 75\n",
    "###### Your BMI is 23.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Height in Cm :180\n",
      "Enter Weight in Kg :75\n",
      "your BMI is  23.148148148148145\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"Enter Height in Cm :\"))\n",
    "b=int(input(\"Enter Weight in Kg :\"))\n",
    "d=a/100\n",
    "c = b / (d*d)\n",
    "print(\"your BMI is \" , c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Sum of n Positive Integers\n",
    "### Write a python program to sum of the first n positive integers\n",
    "#### Program Console Sample 1:\n",
    "###### Enter value of n: 5\n",
    "###### Sum of n Positive integers till 5 is 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter value of n : 5\n",
      "Sum of n Positive integers till  5 is  15.0\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"Enter value of n : \"))\n",
    "b=(a * (a + 1)) / 2\n",
    "print(\"Sum of n Positive integers till \" , a,  \"is \" ,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 14. Digits Sum of a Number\n",
    "### Write a Python program to calculate the sum of the digits in an integer\n",
    "#### Program Console Sample 1:\n",
    "##### Enter a number: 15\n",
    "###### Sum of 1 + 5 is 6\n",
    "#### Program Console Sample 2:\n",
    "##### Enter a number: 1234\n",
    "###### Sum of 1 + 2 + 3 + 4 is 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number :12345\n",
      "Sum Is :  15\n"
     ]
    }
   ],
   "source": [
    "a=map(int,str(input(\"Enter a number :\")))\n",
    "print(\"Sum Is : \",sum(a))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
